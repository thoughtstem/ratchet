#lang racket

(provide basic-input-editor)

(require racket/gui framework pict
         "../../base.rkt")

(define (basic-input-editor parent vis-lang)
  (define top-panel (new horizontal-panel%
                         [parent parent]
                         [alignment '(center center)]
                         [stretchable-width #t]))

  (define legend-canvas
    (new editor-canvas%
         [parent top-panel]
         [min-width 250]
         [min-height 400]
         [stretchable-width #t]))
  
  (define legend  (new pasteboard%))
  
  (send legend-canvas set-editor legend)

  (define mappings (visual-language-mappings vis-lang))

  (for ([m mappings]
        [i (range (length mappings))])
    (show-mapping legend m i))

  (send legend lock #t)
  
  (define the-editor (new (visual-language-editor vis-lang)))
  (define mb (new menu-bar% [parent parent]))
  (define m-edit (new menu% [label "Edit"] [parent mb]))
  (define m-font (new menu% [label "Font"] [parent mb]))
  (append-editor-operation-menu-items m-edit #f)
  (append-editor-font-menu-items m-font)
  (send the-editor set-max-undo-history 100)

  (define input-canvas
    (new editor-canvas%
         [parent top-panel]
         [min-width 250]
         [min-height 400]
         [stretchable-width #t]))
  
  (send input-canvas set-editor the-editor)

  the-editor)



(define (show-mapping panel m mi)
  ;Consider putting m (an image snip) onto "panel" (a pasteboard%).
  ;  Better than canvases on panels, right?
  ;Maybe, but can the snip contain the label?  Snips within snips?
  ;  Nah... Going to need some way of associating snips with each other on the pasteboard.

  (define is (new image-snip%))
  (send is set-bitmap
        (pict->bitmap (scale-to-fit (identifier-mapping-picture m) 20 20)))
  
  (send panel insert
        is
        0 (* 20 mi))

  (send panel insert
        (make-object string-snip% (~a "(" (identifier-mapping-letter m) ") " (identifier-mapping-main m)))
        40 (* 20 mi)))


(require pict/snip)
(define (visual-language-editor vis-lang)
  (define mappings (visual-language-mappings vis-lang))
  
  (define picts (map identifier-mapping-picture mappings))

  (define ns (visual-language-ns vis-lang))
    
  (define visual-editor%
    (class racket:text%
      (super-new)
            
      (define/override (on-char ke)
        (define ke-l (~a (send ke get-key-code)))

        (define mapping
          (findf (λ(m)
                   (string=? (~a (identifier-mapping-letter m))
                             ke-l))
                 mappings))

        (if mapping
            (send this insert
                  (new pict-snip%
                       [pict (identifier-mapping-picture mapping)]))
            (super on-char ke)))

      (define/public (get-snips (current (send this find-first-snip))
                                (ret '()))
        (if (not current)
            (reverse ret)
            (send this get-snips
                  (send current next)
                  (cons current ret))))

      (define/public (get-code)
 
        (define (snip->string s)
          (cond [(is-a? s pict-snip%)   (pict->letter vis-lang
                                          (send s get-pict))]
                [(is-a? s string-snip%)  (send s get-text
                                               0
                                               (send s get-count))]
                [else (error (~a "What's that? " s))]))
              
        (define snips (send this get-snips))
        (apply ~a
               (map snip->string snips)))

      (define/public (run-code)
        (define code
          (~a "(" (visual-language-wrapper vis-lang)  " "
              (send this get-code)
              ")"))

          (eval
            (read
              (open-input-string code))
            ns)
          
          )))

  visual-editor%)

(define (pict->letter vis-lang pict)
  (define mappings (visual-language-mappings vis-lang))

  (define mapping
    (findf
     (λ(m)
       (equal?
        (identifier-mapping-picture m)
        pict))
     mappings))

  (and mapping
       (identifier-mapping-main mapping)))




